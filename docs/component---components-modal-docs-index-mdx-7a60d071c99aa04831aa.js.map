{"version":3,"sources":["webpack:///../components/Modal/docs/index.mdx"],"names":["_frontmatter","name","TagVersion","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","isCopyable","status","__position","__code","__scope","Playground","Explain","Modal","Button","Text","Table","Props","useState","visible","setVisible","round","setRound","theme","setTheme","onClick","style","marginLeft","marginTop","String","onCancel","onOk","dialogRef","height","wrapper","renderFooter","dialogElement","block","public","map","columns","data","footer","borderTop","display","alignItems","justifyContent","isMDXComponent"],"mappings":"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","file":"component---components-modal-docs-index-mdx-7a60d071c99aa04831aa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/markyctian/nes-design/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Explain } from 'docz';\nimport { Modal, Button, Text, Table } from '@components';\nimport { Props } from './config';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst TagVersion = makeShortcode(\"TagVersion\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h2>\n    <TagVersion component=\"Modal\" mdxType=\"TagVersion\" />\n    <h2 {...{\n      \"id\": \"use-and-import\"\n    }}>{`Use and Import`}</h2>\n    <Explain component=\"Modal\" isCopyable mdxType=\"Explain\" />\n    <h2 {...{\n      \"id\": \"import-tips\"\n    }}>{`Import Tips`}</h2>\n    <Text status=\"error\" mdxType=\"Text\">\n  NES.css does not include any JavaScript. If you want to use dialog element other than Chrome, you need polyfill. \n    </Text>\n    <Text status=\"error\" mdxType=\"Text\">\n  官方未提供 dialog 的 polyfill，使用请注意浏览器兼容性。\n    </Text>\n    <h2 {...{\n      \"id\": \"case\"\n    }}>{`Case`}</h2>\n    <Playground __position={3} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  const [round, setRound] = useState(false)\\n  const [theme, setTheme] = useState(\\'\\')\\n  return (\\n    <div>\\n      <Button status=\\\"primary\\\" onClick={() => setVisible(true)}>\\n        Open Modal\\n      </Button>\\n      <Button style={{ marginLeft: 10 }} onClick={() => setRound(!round)}>\\n        Modal Round Control\\n      </Button>\\n      <Button\\n        style={{ marginLeft: 10 }}\\n        onClick={() => setTheme(theme ? \\'\\' : \\'dark\\')}\\n      >\\n        Modal Theme Control\\n      </Button>\\n      <Text style={{ marginTop: 10 }}>\\n        Modal Attr: round: {String(round)} / theme: {theme}\\n      </Text>\\n      <Modal\\n        visible={visible}\\n        onCancel={() => setVisible(false)}\\n        theme={theme}\\n        round={round}\\n        onOk={() => setVisible(false)}\\n      >\\n        {dialogRef => <div style={{ height: 50 }}> This is Modal Body</div>}\\n      </Modal>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Explain,\n      Modal,\n      Button,\n      Text,\n      Table,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        const [round, setRound] = useState(false);\n        const [theme, setTheme] = useState('');\n        return <div>\n        <Button status=\"primary\" onClick={() => setVisible(true)} mdxType=\"Button\">\n          Open Modal\n        </Button>\n        <Button style={{\n            marginLeft: 10\n          }} onClick={() => setRound(!round)} mdxType=\"Button\">\n          Modal Round Control\n        </Button>\n        <Button style={{\n            marginLeft: 10\n          }} onClick={() => setTheme(theme ? '' : 'dark')} mdxType=\"Button\">\n          Modal Theme Control\n        </Button>\n        <Text style={{\n            marginTop: 10\n          }} mdxType=\"Text\">Modal Attr: round: {String(round)} / theme: {theme}</Text>\n        <Modal visible={visible} onCancel={() => setVisible(false)} theme={theme} round={round} onOk={() => setVisible(false)} mdxType=\"Modal\">\n          {dialogRef => <div style={{\n              height: 50\n            }}> This is Modal Body</div>}\n        </Modal>\n      </div>;\n      }}\n    </Playground>\n    <Playground __position={4} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <div>\\n      <Button status=\\\"primary\\\" onClick={() => setVisible(true)}>\\n        Open Modal\\n      </Button>\\n      <Modal\\n        visible={visible}\\n        renderFooter={dialogElement => (\\n          <Button block status=\\\"primary\\\" onClick={() => setVisible(false)}>\\n            {\\' \\'}\\n            Custom Footer{\\' \\'}\\n          </Button>\\n        )}\\n      >\\n        {dialogElement => (\\n          <div style={{ height: 50 }}> This is Modal Body</div>\\n        )}\\n      </Modal>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Explain,\n      Modal,\n      Button,\n      Text,\n      Table,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} wrapper=\"Custom Modal\" mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <div>\n        <Button status=\"primary\" onClick={() => setVisible(true)} mdxType=\"Button\">\n          Open Modal\n        </Button>\n        <Modal visible={visible} renderFooter={dialogElement => <Button block status=\"primary\" onClick={() => setVisible(false)} mdxType=\"Button\"> Custom Footer </Button>} mdxType=\"Modal\">\n          {dialogElement => <div style={{\n              height: 50\n            }}> This is Modal Body</div>}\n        </Modal>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <>\n  {[Props.public].map(({\n        columns,\n        data,\n        footer\n      }) => <div style={{\n        marginTop: 20\n      }}>\n        <Table theme=\"dark\" columns={columns} data={data} footer={() => <div style={{\n          height: 60,\n          borderTop: '4px solid white',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n              {footer}\n            </div>} mdxType=\"Table\" />\n      </div>)}\n    </>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}