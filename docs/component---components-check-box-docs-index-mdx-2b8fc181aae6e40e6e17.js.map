{"version":3,"sources":["webpack:///../components/CheckBox/docs/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","component","isCopyable","__position","__code","__scope","CheckBox","CheckboxGroup","Table","Playground","TagVersion","Explain","Props","wrapper","useState","checked","setChecked","onChange","e","target","value","setValue","options","label","defaultChecked","values","theme","style","display","background","height","alignItems","labelProps","children","disabled","public","checkboxGroup","checkbox","option","map","columns","data","footer","marginTop","borderTop","justifyContent","isMDXComponent"],"mappings":"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","file":"component---components-check-box-docs-index-mdx-2b8fc181aae6e40e6e17.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/markyctian/nes-design/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CheckBox, CheckboxGroup, Table } from '@components';\nimport { Playground, TagVersion, Explain } from 'docz';\nimport { Props } from './config';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h2>\n    <TagVersion component=\"Checkbox\" mdxType=\"TagVersion\" />\n    <h2 {...{\n      \"id\": \"use-and-import\"\n    }}>{`Use and Import`}</h2>\n    <Explain component=\"Checkbox\" isCopyable mdxType=\"Explain\" />\n    <h2 {...{\n      \"id\": \"case\"\n    }}>{`Case`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const [checked, setChecked] = useState(false)\\n  return (\\n    <CheckBox checked={checked} onChange={e => setChecked(e.target.checked)}>\\n      {\\' \\'}\\n      Yes{\\' \\'}\\n    </CheckBox>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      CheckBox,\n      CheckboxGroup,\n      Table,\n      Playground,\n      TagVersion,\n      Explain,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} wrapper=\"CheckBox\" mdxType=\"Playground\">\n  {() => {\n        const [checked, setChecked] = useState(false);\n        return <CheckBox checked={checked} onChange={e => setChecked(e.target.checked)} mdxType=\"CheckBox\"> Yes </CheckBox>;\n      }}\n    </Playground>\n    <Playground __position={3} __code={'() => {\\n  const [value, setValue] = useState([])\\n  return (\\n    <>\\n      <CheckboxGroup\\n        value={value}\\n        options={[\\n          { label: \\'Yes\\', value: \\'yes\\', defaultChecked: true },\\n          { label: \\'No\\', value: \\'no\\' },\\n        ]}\\n        onChange={values => setValue(values)}\\n      />\\n      <CheckboxGroup\\n        theme=\\\"dark\\\"\\n        style={{\\n          display: \\'flex\\',\\n          background: \\'black\\',\\n          height: 50,\\n          alignItems: \\'center\\',\\n        }}\\n        value={value}\\n        options={[\\n          { label: \\'Yes\\', value: \\'yes\\', defaultChecked: true },\\n          { label: \\'No\\', value: \\'no\\' },\\n        ]}\\n        onChange={values => setValue(values)}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      CheckBox,\n      CheckboxGroup,\n      Table,\n      Playground,\n      TagVersion,\n      Explain,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} wrapper=\"CheckboxGroup / Option is Object\" mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState([]);\n        return <>\n          <CheckboxGroup value={value} options={[{\n            label: 'Yes',\n            value: 'yes',\n            defaultChecked: true\n          }, {\n            label: 'No',\n            value: 'no'\n          }]} onChange={values => setValue(values)} mdxType=\"CheckboxGroup\" />\n          <CheckboxGroup theme=\"dark\" style={{\n            display: 'flex',\n            background: 'black',\n            height: 50,\n            alignItems: 'center'\n          }} value={value} options={[{\n            label: 'Yes',\n            value: 'yes',\n            defaultChecked: true\n          }, {\n            label: 'No',\n            value: 'no'\n          }]} onChange={values => setValue(values)} mdxType=\"CheckboxGroup\" />\n        </>;\n      }}\n    </Playground>\n    <Playground __position={4} __code={'() => {\\n  const [value, setValue] = useState([])\\n  return (\\n    <CheckboxGroup\\n      value={value}\\n      options={[\\'Yes\\', \\'No\\']}\\n      onChange={values => setValue(values)}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      CheckBox,\n      CheckboxGroup,\n      Table,\n      Playground,\n      TagVersion,\n      Explain,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} wrapper=\"CheckboxGroup / Option is string\" mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState([]);\n        return <CheckboxGroup value={value} options={['Yes', 'No']} onChange={values => setValue(values)} mdxType=\"CheckboxGroup\" />;\n      }}\n    </Playground>\n    <Playground __position={5} __code={'() => {\\n  const [value, setValue] = useState([\\'orange\\'])\\n  return (\\n    <CheckboxGroup\\n      value={value}\\n      options={[\\n        { label: \\'Apple\\', value: \\'apple\\', defaultChecked: true },\\n        { label: \\'Banana\\', value: \\'banana\\' },\\n      ]}\\n      onChange={values => setValue(values)}\\n    >\\n      <CheckBox\\n        labelProps={{ style: { display: \\'block\\' } }}\\n        value=\\\"orange\\\"\\n        children=\\\"Orange\\\"\\n      />\\n    </CheckboxGroup>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      CheckBox,\n      CheckboxGroup,\n      Table,\n      Playground,\n      TagVersion,\n      Explain,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} wrapper=\"CheckboxGroup + CheckBox\" mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState(['orange']);\n        return <CheckboxGroup value={value} options={[{\n          label: 'Apple',\n          value: 'apple',\n          defaultChecked: true\n        }, {\n          label: 'Banana',\n          value: 'banana'\n        }]} onChange={values => setValue(values)} mdxType=\"CheckboxGroup\">\n          <CheckBox labelProps={{\n            style: {\n              display: 'block'\n            }\n          }} value=\"orange\" children=\"Orange\" mdxType=\"CheckBox\" />\n        </CheckboxGroup>;\n      }}\n    </Playground>\n    <Playground __position={6} __code={'() => {\\n  const [value, setValue] = useState([\\'orange\\'])\\n  return (\\n    <>\\n      <CheckboxGroup\\n        disabled\\n        value={value}\\n        options={[{ label: \\'Apple\\', value: \\'apple\\', defaultChecked: true }]}\\n        onChange={values => setValue(values)}\\n      />\\n      <CheckBox disabled defaultChecked>\\n        {\\' \\'}\\n        Banana{\\' \\'}\\n      </CheckBox>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      CheckBox,\n      CheckboxGroup,\n      Table,\n      Playground,\n      TagVersion,\n      Explain,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} wrapper=\"disabled\" mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState(['orange']);\n        return <>\n          <CheckboxGroup disabled value={value} options={[{\n            label: 'Apple',\n            value: 'apple',\n            defaultChecked: true\n          }]} onChange={values => setValue(values)} mdxType=\"CheckboxGroup\" />\n          <CheckBox disabled defaultChecked mdxType=\"CheckBox\"> Banana </CheckBox>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <>\n  {[Props.public, Props.checkboxGroup, Props.checkbox, Props.option].map(({\n        columns,\n        data,\n        footer\n      }) => <div style={{\n        marginTop: 20\n      }}>\n        <Table theme=\"dark\" columns={columns} data={data} footer={() => <div style={{\n          height: 60,\n          borderTop: '4px solid white',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n              {footer}\n            </div>} mdxType=\"Table\" />\n      </div>)}\n    </>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}